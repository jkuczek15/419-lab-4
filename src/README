1st Experiment:(Input: /cpre419/input-50m)
Arguments: None
First 5:
00000000AAKKeeU OOOOOOFFFggggggggkkkSSSSFFFFFFFF7777777Rfggggggg0000KKKKKEEEEEEEEPPPPPFFFFFFF111
00000000BBBPPPP llllllYYYYYYeeooooooFFtttWppppppttttQQQQQQQQ44BBBTTTTTT888888855555555kkkkkkkkkE
00000000DDDUUUU 888888888oooCCjjj2222222pppppppppAAAAAAAbbbbbbbbbCCCKKKKllllllllrrrrrrrr44444444
00000000LLLLGHH ggggg777777sssssccccUUvvvvvvvvbbbNNNNNNNNNTTTTTdddddduuuuuuuuu66PPbbbbbbbbOaaaaa
00000000NBBVYll 66666663333333iiiiiiiffffffffMAAAAAAAGGGGGGGGOOOOOcccLLLLLL77777777yyyyyyyyCCttt

Last 5:
zzzzzzzOOOJJJJM dddddRRgggggggggzzOOOOO66WSSSSSSS555qqqqqqqqqgggglllllll9999999AAAAALLLLLLLLhhhh
zzzzzzzzJJJBBOO tttttttDDaccHXoommm2aaaaa44444444wwwFFFFFFOOOOOOOOOMMM1111nAAAAGqqyyyyyyyNNNNNNN
zzzzzzzzJOOLLLL ajjjjjjjj7733333MMMMMMMMrrrSSSSSSSSnnnnqqqqqP3333333ZZZZZZUUUU444444ddddHHHHHLOW
zzzzzzzzOOOKKKv lllllllllzzzzzzzLVVVVVVVVVZZZttttttttnnqqTTAAAAAAAASSSmmmmmYYYYYYYYY000000009BBB
zzzzzzzzYYYPPPP 444444HHHHHHSSS00000UUUUUUUUTTTTTTTTTfffffffffBBBWWWWWWWWWWWWNNNNAAAAhh000666666


2nd Experiment: (Input: /cpre419/input-5m)
Arguments: None
First 5:
00000HHNNNNpppp PPPPPPPPrrrrrrr77777ZZZZZZXXXXX888888800000ooooooooRREEEnnnnnlllJJJJJJHHXXXnnnnnnnnnVVVVVVVVV6666666	
00000aaaaIIPKKK tAAAAUUttttttttth88888GGGGGGGGllleeeeeeee22222DDDDLLLLLLLL11111bbbbbCCCCCCCCCRRRrrrrrrrreeeeeeTTTTTT	
00006JJJJMMQQQQ wwwwwwwwwGGGGGLLLttttttjjjjjdddddddd777777777t999999999YYYYYYYYYXXXXXXGGCCCCCCCCtPPPllllllllHHHHeee8	
0000AAAAAAAEEEF QQQQQQQKKKK44444ss222222200000mmmmmjjjjjjBBBBB999BBBBBBBBHHHHHWWWWWWWWWQQQQQQQQfffffffOOOOOOORRFFFFF	
0000AAAACCCbddK ff88OOOOOOQQQQQQQQYYYYYYYCCCC8CCCCCCCCCUUUUUUUUUGGGGGGGSSSSRRRRRRRbbbbbbbbbyyyBBBBBB33333333qOOOOOOO

Last 5:
zzzzwwwwEEddddL nnnnnnnnjjjvFFFFFFFFrrrrrrrrHHHHHHHwwwwwJJJJJWZZZZZZ88882FFFFFFjj33333333iiiiiiiiRRRYYffJJJJJJllllll	
zzzzwwwwJJJJPPO eeeeeeeeelllllTTTTTbboooPPPBUUUUUUUUUPPfffffffAAAAAAAAppppppAAAAAAAAIIIIIIInnnnnnnn99999VVVVVttKKKKK	
zzzzxKKHHHHssss NNNNhhhhhhhRRRxxxxOOOBBB777777XX777777MMMHHHH2222222229kkrrrPPPPPPPPpppppppppYYYYYYYmmmmmmmS66666600	
zzzzzzEERRRMMME BPPPPPQQQQQQQKKKxxxxbbaaaooqqqqqqqqqWWWWWWWW333333PPPPhhhhhhhhhGGGGGGGGGVVVVVZZZxxOOOORRRRRRii111111	
zzzzzzOOOOVaagg sssssAAAAAAAARRRRRRTTTTTTTTMMMMMuuuuuurr000000000kkkkkkIIIIIICCCiiiiiiiiilllbZZ2222222222JJJJJJmmmII

Algorithm:
- Use an alphabet consisting of all numbers/letters.
- Compute split length = alphabet length / number of partitions.
- Divide alphabet into equal length splits using the split length.
- Created filled string intervals using the two ends of the split, an example range would be 00000 - 99999.
- Keep a partition counter as we loop through all the splits. 
- If the key falls within a certain split, return the number of that partition. 


